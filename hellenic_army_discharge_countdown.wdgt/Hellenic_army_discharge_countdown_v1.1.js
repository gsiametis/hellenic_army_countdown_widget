// This file was generated by Dashcode from Apple Inc.
// You may edit this file to customize your Dashboard widget.

var remainingDays;

var Surname_Input = 'Ψάρακας Νεανίας';
var Rank_Input = 'ΣΤΡ';
var Division_Input = 'ΠΖ';
var year = 2008;
var month = 1;
var day = 1;
var iota_months = 9;
var prison = 0;
var short_is = false;
var daystocount = new Date();
//var ShortSelector;

// Function: updateTimerDisplay()
// The main loop called.
//
//
function updateTimerDisplay()
{
    calculateRemainingDays();
	calculateFiringDay();
	SavePreferences_Apolysews();
}

//
// Function: updateRank_Name_Display()
// Update the Full Name
//
function updateRank_Name_Display()
{
Surname_Input = document.getElementById("Surname_Input_field");
Surname_Input = Surname_Input.value;

Rank_Input = document.getElementById("Rank_Input");
Rank_Input = Rank_Input.value;

Division_Input = document.getElementById("Division_Input");
Division_Input = Division_Input.value;
FullName = Rank_Input + ' (' + Division_Input + ') '+Surname_Input;
setElementText("Full_Name", FullName);

SavePreferences_Apolysews();
}

///Function: SavePreferences_Apolysews()
///Save the settings, duh!

function SavePreferences_Apolysews()
{
widget.setPreferenceForKey(Surname_Input, "Name");
widget.setPreferenceForKey(Rank_Input, "Rank");
widget.setPreferenceForKey(Division_Input, "Division");
widget.setPreferenceForKey(year, "Year");
widget.setPreferenceForKey(month, "Month");
widget.setPreferenceForKey(day, "Day");
widget.setPreferenceForKey(short_is, "Short");
widget.setPreferenceForKey(iota_months, "iota_months");
widget.setPreferenceForKey(prison, "Prison");
}

///Function: GetPreferences_Apolysews()
///Read preferences and set them in the apropriate elements
///Should be called before anything else in the widget flow
function GetPreferences_Apolysews()
{
Surname_Input = widget.preferenceForKey("Name");
if (!Surname_Input){
	Surname_Input = "Ψάρακας Νεανίας";
	}
var set_Name = document.getElementById("Surname_Input_field");
set_Name.value = Surname_Input;
Rank_Input = widget.preferenceForKey("Rank");
var set_Rank = document.getElementById("Rank_Input");
set_Rank.value = Rank_Input;
Division_Input = widget.preferenceForKey("Division");
var set_Division = document.getElementById("Division_Input");
set_Division.value = Division_Input;
year = widget.preferenceForKey("Year");
var set_year = document.getElementById("year_start");
set_year.value = year;
month = widget.preferenceForKey("Month");
var set_month = document.getElementById("month_start");
set_month.value = month;
day = widget.preferenceForKey("Day");
var set_day = document.getElementById("day_start");
set_day.value = day;
short_is = widget.preferenceForKey("Short");
var set_short_is = document.getElementById("shortel");
set_short_is.checked = short_is;
iota_months = widget.preferenceForKey("iota_months");
var set_iota_months = document.getElementById("shortened_selection");
set_iota_months.value = iota_months;
prison = widget.preferenceForKey("Prison");
if (!prison){
	prison = 0
	}
var set_Prison = document.getElementById("prison");
set_Prison.value = prison;

}
/*
///Will be enabled when I figure out how (if) it works!
///
function toggle_short()
{
	short_is = document.getElementById("shortel");
	short_is = shortel.checked;
	ShortSelector = document.getElementById("testt");
	if (short_is == false){
		ShortSelector.object.setEnabled(false);
		}
	if (short_is == true){
		ShortSelector.object.setEnabled(true);
		}
	calculateRemainingDays();

}
*/

//
// Function: setElementText(elementName, elementValue)
// Set the text contents of an HTML div
//
// elementName: Name of the element in the DOM
// elementValue: Text to display in the element
//
function setElementText(elementName, elementValue)
{
    var element = document.getElementById(elementName);
    if (element) {
        element.innerText = elementValue;
    }
}

//
// Fix for Tiger, since addMonth() doesn't work as expected. Blame Apple, not me!
//
// This is legacy stuff (Tiger was introduced in 2005), but if it works we don't fix it.

function myAddMonths(date_to_start, months_to_add)
{
	var month_to_start;
	var years_to_add = 0;
	var how_many_months;
	month_to_start = date_to_start.getMonth();
	how_many_months = month_to_start + months_to_add;
	if (month_to_start + months_to_add <11){
		date_to_start.setMonth(date_to_start.getMonth() + months_to_add);
		return date_to_start;
		}
	if (month_to_start + months_to_add > 11){
	{ var which_month = month_to_start + months_to_add -12;
		 if (which_month > 11){
		 which_month = which_month -12;
		 }
		while (how_many_months > 11){
		years_to_add = years_to_add +1;
		how_many_months = how_many_months -12;
	}

	date_to_start.setMonth(which_month);
	date_to_start.setFullYear(date_to_start.getFullYear() + years_to_add);
	return date_to_start;
	}

}
}
//
// Function: calculateRemainingDays()
// Determine how many days are left.
//

function calculateRemainingDays()
{
	prison = document.getElementById("prison");
	prison = prison.value *1
	var prison_days = prison;
	if (prison <31){
	prison_days = prison -20;
	}
	if (prison <21){
	prison_days = 0;
	}

	year = document.getElementById("year_start");
	year = year.value *1;
	month = document.getElementById("month_start");
	month = month.value *1;
	day = document.getElementById("day_start");
	day = day.value *1;
	short_is = document.getElementById("shortel");
	short_is = shortel.checked;
	iota_months = document.getElementById("shortened_selection");
	iota_months = iota_months.value *1;
	var day_started = new Date(year, month - 1, day);
	daystocount = day_started;

	if (short_is == false && Rank_Input != "ΔΕΑ"){
		daystocount.setFullYear(day_started.getFullYear() + 1);
	}

	if (Rank_Input == "ΔΕΑ"){
		daystocount = myAddMonths(day_started, 17);
		}

	if (short_is == true && Rank_Input != "ΔΕΑ"){
		//daystocount.setFullYear(day_started.getFullYear() + 1);
		daystocount = myAddMonths(day_started, iota_months);
		}

	daystocount.setDate(daystocount.getDate() + prison);

  today = new Date();
  if (today.getMonth() == month && today.getDate() > day){
  daystocount.setFullYear(daystocount.getFullYear());
  }
  var oneday = 1000*60*60*24;
   remainingDays = (Math.ceil((daystocount.getTime()-today.getTime())/(oneday))) - 1;
   // we subtract one day to represent the "and today" phrase
   var kai_simera = "…και σήμερα"
   if (remainingDays == 0){
	remainingDays = "Καμία";
	}
	if (remainingDays < 0){
	remainingDays = "Απολελέ";
	setElementText("label-days", "…και τρελελέ!");
  kai_simera = "…και τρελελέ!";
	}

    setElementText("remaining-days", remainingDays);
    	setElementText("label-days", kai_simera);
}

/// Function: calculateFiringDay()
/// Determine and display the actual date of fire.

function calculateFiringDay(){
	var fire_year = daystocount.getFullYear();
	var fire_month = daystocount.getMonth();
	var fire_date = daystocount.getDate();
	var fire_day = daystocount.getDay();

	switch (fire_day){
	case 0: fire_day="Κυριακή";
	break;
	case 1: fire_day="Δευτέρα";
	break;
	case 2: fire_day="Τρίτη";
	break;
	case 3: fire_day="Τετάρτη";
	break;
	case 4: fire_day="Πέμπτη";
	break;
	case 5: fire_day="Παρασκευή";
	break;
	case 6: fire_day="Σάββατο";
	}

	switch (fire_month){
	case 0: fire_month="Ιανουαρίου";
	break;
	case 1: fire_month="Φεβρουαρίου";
	break;
	case 2: fire_month="Μαρτίου";
	break;
	case 3: fire_month="Απριλίου";
	break;
	case 4: fire_month="Μαΐου";
	break;
	case 5: fire_month="Ιουνίου";
	break;
	case 6: fire_month="Ιουλίου";
	break;
	case 7: fire_month="Αυγούστου";
	break;
	case 8: fire_month="Σεπτεμβρίου";
	break;
	case 9: fire_month="Οκτωβρίου";
	break;
	case 10: fire_month="Νοεμβρίου";
	break;
	case 11: fire_month="Δεκεμβρίου";
	}

	var fire =  fire_day + ", " + fire_date + " " + fire_month + " " + fire_year;

	setElementText("Date_fire", fire);
}


//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    //setupParts();

}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // remove any preferences as needed
    // widget.setPreferenceForKey(null, createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop timer to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	// Re-start timer
	GetPreferences_Apolysews();
	updateRank_Name_Display();
	calculateRemainingDays();
	updateTimerDisplay();

}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
	// Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget)
        widget.prepareForTransition("ToBack");

    front.style.display="none";
    back.style.display="block";

    if (window.widget)
        setTimeout('widget.performTransition();', 0);
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget)
        widget.prepareForTransition("ToFront");

    front.style.display="block";
    back.style.display="none";



    if (window.widget)
        setTimeout('widget.performTransition();', 0);

updateRank_Name_Display();
updateTimerDisplay();
}

// Initialize the Dashboard event handlers
if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
